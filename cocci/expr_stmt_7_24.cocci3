@@
expression E0, E1, E2, E3;
typedef SUINT;
@@
- E0[E1] += (int )(E2[E1] * (SUINT )E3 + (1 << 2)) >> 3; 
+ E0[E1] += (SUINT)((int )(E2[E1] * (SUINT )E3 + (1 << 2)) >> 3); 
// Infered from: (FFmpeg/{prevFiles/prev_949d21_63e400_libavcodec#dcadsp.c,revFiles/949d21_63e400_libavcodec#dcadsp.c}: decor_c)
// Recall: 0.12, Precision: 1.00, Matching recall: 1.00

// ---------------------------------------------
// Final metrics (for the combined 4 rules):
// -- Edit Location --
// Recall: 0.62, Precision: 1.00
// -- Node Change --
// Recall: 0.62, Precision: 1.00
// -- General --
// Functions fully changed: 5/8(62%)

/*
Functions where the patch did not apply:
 - qemu/prevFiles/prev_0499e4_0dcece_target-i386#op.c: op_movswl_EAX_AX
 - FFmpeg/prevFiles/prev_ce0106_44e210_libavcodec#dca_xll.c: combine_residual_frame
 - qemu/prevFiles/prev_0499e4_0dcece_target-i386#op.c: op_movslq_EDX_EAX
*/

// ---------------------------------------------
